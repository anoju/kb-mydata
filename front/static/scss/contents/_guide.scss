/*가이드*/
[class*='gd__h'] {
  color: #999;
  margin-bottom: 1em;
  font-weight: bold;
  line-height: 1.3;
  word-break: break-all;
  &:first-child,
  &.first {
    margin-top: 0 !important;
  }
  & + [class*='gd__h'] {
    margin-top: 1em !important;
  }
  &:before {
    content: '#';
  }
  &:after {
    content: '';
    display: block;
    height: 0.4em;
    background: #eee;
    margin-top: -0.4em;
    z-index: -1;
  }
}
.gd__h0 {
  text-align: center;
  font-size: 3rem;
  color: #000;
}
.gd__h1 {
  font-size: 2.4rem;
  color: #d00;
  margin-top: 4em;
  &:after {
    background-color: rgba(221, 0, 0, 0.1);
  }
}
.gd__h2 {
  font-size: 2rem;
  color: #157941;
  margin-top: 3em;
  &:after {
    background-color: rgba(21, 121, 65, 0.1);
  }
}
.gd__h3 {
  font-size: 1.8rem;
  color: #111;
  margin-top: 2em;
  &:after {
    background-color: rgba(21, 21, 21, 0.1);
  }
}
.gd__h4 {
  margin-top: 2em;
}
.gd__wrap {
  overflow: hidden;
}
.gd__box {
  margin: 2rem auto;
  display: flex;
  width: 15rem;
  height: 15rem;
  background: #eee;
  align-items: center;
  justify-content: center;
  transition: 0.5s;
  &.on {
    background: #d00;
    color: #fff;
  }
  &.active {
    background: blue;
    color: #fff;
  }
  &.checked {
    background: green;
    color: #fff;
  }
  &.selected {
    background: orange;
    color: #fff;
  }
  //@extend 샘플
  &-2 {
    @extend .gd__box;
    border: 0.5rem solid red;
    //at-root 샘플
    @include unify-parent('section') {
      background-color: blue;
    }
    .gd__wrap2 & {
      border-color: #000;
    }
  }
}
.gd__img {
  @include outer;
  background: red;
  > div {
    position: relative;
  }
  img {
    width: 100%;
    top: 0;
    transform: translateY(0);
    transition: top 0.3s;
  }
  &.fixed {
    .inner {
      position: fixed;
      top: 5.6rem;
      left: 0;
      width: 100%;
      height: 10rem;
      overflow: hidden;
      z-index: 10;
    }
    img {
      position: relative;
      top: 50%;
      transform: translateY(-50%);
    }
  }
  &.ty2 {
    overflow: hidden;
  }
}
.gd__tbl {
  overflow-x: auto;
  overflow-y: hidden;
  th,
  td {
    padding: 1rem;
    border: 0.1rem solid #ddd;
    white-space: nowrap;
  }
}
.gd__code {
  margin: 1rem 0;
  padding: 1.5rem;
  padding-top: 0;
  background: #f3f3f3;
  font-size: 1.2rem;
  white-space: pre-line;
}
.gd__theme_color {
  position: fixed;
  left: 0;
  bottom: 2rem;
  text-align: center;
  transform: translateX(-100%);
  transition: 0.3s;
  z-index: 1000;
  &.open {
    left: 2rem;
    transform: translateX(0);
    .gd__theme_btn {
      i {
        transform: rotate3d(0, 1, 0, 180deg);
      }
    }
    dl {
      margin-right: 0;
    }
  }
  .gd__theme_btn {
    position: absolute;
    left: 100%;
    bottom: 0;
    display: flex;
    width: 2.5rem;
    height: 3rem;
    border-radius: 0 0.8rem 0.8rem 0;
    align-items: center;
    justify-content: center;
    background: rgba(255, 255, 255, 0.8);
    backdrop-filter: blur(2px);
    box-shadow: 0 0 1rem rgba(0, 0, 0, 0.3);
    i {
      transform: rotate3d(0, 1, 0, 0deg);
      transition: 0.3s;
    }
  }
  dl {
    margin-right: 1rem;
    padding: 1rem;
    border-radius: 0.8rem 0.8rem 0 0.8rem;
    background: rgba(255, 255, 255, 0.8);
    backdrop-filter: blur(2px);
    box-shadow: 0 0 1rem rgba(0, 0, 0, 0.3);
  }
  dd {
    margin-top: 1rem;
    > div {
      margin-top: 0.3rem;
      display: flex;
      font-size: 1.2rem;
      align-items: center;
      .color {
        width: 100%;
        flex: 1 1 auto;
        text-align: left;
      }
      .reset {
        button {
          border: 0.1rem solid #ddd;
          padding: 0 0.5rem;
          border-radius: 0.5rem;
          background: #fff;
        }
      }
    }
  }
  input {
    width: 100%;
  }
}
.gd__lottie-box {
  width: 20rem;
  height: 20rem;
  margin: 0 auto;
}
.gd__lottie-confetti,
.gd__lottie-complete {
  width: 30rem;
  height: 10rem;
  margin: 0 auto;
}
.gd__scroll-area {
  max-height: 25rem;
  padding: 1rem;
  background: #f1f1f1;
  border: 0.1rem solid #ddd;
  overflow: auto;
  &.anchor__area {
    > p {
      overflow-anchor: none;
    }
    .anchor {
      height: 0.1rem;
      overflow-anchor: auto;
    }
  }
}
.gd__txt-box {
  border: 0.1rem solid #ddd;
  word-break: break-all;
  > div {
    padding: 1em;
  }
  div + div {
    margin-top: 1em;
  }
}
.gd__chart-wrap {
  height: 40rem;
  > div {
    display: flex;
    flex-direction: column;
    justify-content: flex-end;
    height: 40rem;
    padding: 2rem 2rem 3.2rem;
    color: #fff;
    background: linear-gradient(156.21deg, #5f6fff 0%, #a26cff 100%);
  }
  .section & {
    @include outer;
  }
  .match-profile {
    position: relative;
    top: 0;
    background: none;
    height: auto;
    padding: 0;
    margin-bottom: 3rem;
  }
  .price {
    text-align: center;
    .dd {
      strong {
        font-size: 3.8rem;
        font-weight: 500;
      }
    }
  }
  .chart {
    height: 10rem;
  }
  + .gd__chart-wrap {
    margin-top: 3rem;
  }
  &.top-fixed {
    > div {
      position: fixed;
      left: 0;
      top: 4rem;
      padding-top: 0;
      padding-bottom: 0;
      width: 100%;
      height: 6rem;
      justify-content: center;
      z-index: 10;
    }
    .match-profile {
      display: none;
    }
    .price {
      display: flex;
      justify-content: space-between;
      align-items: center;
      .dd {
        strong {
          font-size: 2.8rem;
        }
      }
    }
    .chart {
      display: none;
    }
  }
}
.gd__icon {
  i {
    vertical-align: middle;
  }
}
.gd__img-box-wrap {
  text-align: center;
  .img-box {
    display: inline-block;
    width: 100px;
    margin: 15px;
    vertical-align: top;
  }
}

/* 장영석 */
[data-circle-box].type1 {
  position: relative;
  width: 80px;
  height: 80px;
  font-size: 0;
  .circular-chart {
    display: block;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 80px;
    height: 80px;
  }

  .circle-bg {
    stroke: #ebebeb;
    fill: none;
    stroke-width: 1;
    // vector-effect: non-scaling-stroke;
  }

  .circle {
    fill: none;
    stroke-width: 2;
    stroke-linecap: round;
    opacity: 1;
    animation: progress 1s ease-out both;
    // vector-effect: non-scaling-stroke;
  }

  .win-box {
    .circle {
      stroke: #8624dd;
    }
  }
  .loss-box {
    .circular-chart {
      width: 60px;
      height: 60px;
    }
    .circle {
      stroke: #fb6e37;
      stroke-width: 3;
      animation-delay: 0.3s;
    }
  }
  .draw-box {
    .circular-chart {
      width: 40px;
      height: 40px;
    }
    .circle {
      stroke: #01d0c3;
      stroke-width: 4;
      animation-delay: 0.6s;
    }
  }
}

[data-circle-box].type2 {
  position: relative;
  width: 80px;
  height: 80px;

  .circular-chart {
    display: block;
    position: absolute;
    top: 50%;
    left: 50%;
    width: 100%;
    height: 100%;
    transform: translate(-50%, -50%) rotate(0deg);
    animation: progressTy2 1s ease-out both;
  }

  .circle-bg {
    stroke: #ebebeb;
    fill: none;
    stroke-width: 4;
  }

  .circle {
    fill: none;
    stroke-width: 4;
    opacity: 1;
    animation: progress 1s ease-out both;
  }
}
@keyframes progress {
  from {
    opacity: 0;
    stroke-dasharray: 0 100;
  }
}
@keyframes progressTy2 {
  from {
    transform: translate(-50%, -50%) rotate(0deg);
  }
}

.number-random {
  --animation-random-duration: 0.5s;
  .number {
    display: inline-block;
    &:after {
      content: counter(count);
      counter-reset: count 0;
      font-size: 20px;
    }
  }
  @for $i from 1 to 10 {
    .number:nth-of-type(#{$i}):after {
      @if ($i%2 == 0) {
        animation: counter var(--animation-random-duration) linear infinite alternate-reverse;
      } @else {
        animation: counter var(--animation-random-duration) linear infinite alternate;
      }
    }
  }
}

@keyframes counter {
  0% {
    counter-increment: count 0;
  }
  10% {
    counter-increment: count 1;
  }
  20% {
    counter-increment: count 2;
  }
  30% {
    counter-increment: count 3;
  }
  40% {
    counter-increment: count 4;
  }
  50% {
    counter-increment: count 5;
  }
  60% {
    counter-increment: count 6;
  }
  70% {
    counter-increment: count 7;
  }
  80% {
    counter-increment: count 8;
  }
  90% {
    counter-increment: count 9;
  }
  100% {
    counter-increment: count 0;
  }
}

.number-random2 {
  --animation-random-duration: 0.4s;
  > * {
    vertical-align: middle;
  }
  .number {
    overflow: hidden;
    display: inline-block;
    position: relative;
    font-size: 20px;
    line-height: 1;
    color: transparent;
    &:before {
      content: counter(count);
      counter-reset: count 0;
      font-size: 20px;
      color: #111;
      position: absolute;
      line-height: 1;
      top: 0;
      left: 0;
    }
    &:after {
      content: counter(count2);
      counter-reset: count2 0;
      font-size: 20px;
      color: #111;
      position: absolute;
      top: 0;
      left: 0;
      line-height: 1;
      transform: translateY(100%);
    }
  }
  @for $i from 1 to 10 {
    .number:nth-of-type(#{$i}) {
      &:before {
        @if ($i%2 == 0) {
          animation: numberRandomBeforeReverse var(--animation-random-duration) linear infinite both, numberRandomBeforeCount calc(var(--animation-random-duration) * 10) linear infinite both;
        } @else {
          animation: numberRandomBefore var(--animation-random-duration) linear infinite both, numberRandomBeforeCount calc(var(--animation-random-duration) * 10) linear infinite both;
        }
      }
      &:after {
        @if ($i%2 == 0) {
          animation: numberRandomAfterReverse var(--animation-random-duration) linear infinite both,
            numberRandomAfterCount calc(var(--animation-random-duration) * 10) linear calc(var(--animation-random-duration) / 2) infinite both;
        } @else {
          animation: numberRandomAfter var(--animation-random-duration) linear infinite both,
            numberRandomAfterCount calc(var(--animation-random-duration) * 10) linear calc(var(--animation-random-duration) / 2) infinite both;
        }
      }
    }
  }
}
@keyframes numberRandomBefore {
  0% {
    transform: translateY(0%);
  }
  50% {
    transform: translateY(-100%);
  }
  50.1% {
    transform: translateY(100%);
  }
}
@keyframes numberRandomBeforeReverse {
  0% {
    transform: translateY(0%);
  }
  50% {
    transform: translateY(100%);
  }
  50.1% {
    transform: translateY(-100%);
  }
}
@keyframes numberRandomBeforeCount {
  0%,
  50%,
  100% {
    counter-increment: count 0;
  }
  10%,
  60% {
    counter-increment: count 2;
  }
  20%,
  70% {
    counter-increment: count 4;
  }
  30%,
  80% {
    counter-increment: count 6;
  }
  40%,
  90% {
    counter-increment: count 8;
  }
}

@keyframes numberRandomAfter {
  0% {
    transform: translateY(100%);
  }
  50% {
    transform: translateY(0%);
  }
  100% {
    transform: translateY(-100%);
  }
}
@keyframes numberRandomAfterReverse {
  0% {
    transform: translateY(-100%);
  }
  50% {
    transform: translateY(0%);
  }
  100% {
    transform: translateY(100%);
  }
}
@keyframes numberRandomAfterCount {
  0%,
  50%,
  100% {
    counter-increment: count2 1;
  }
  10%,
  60% {
    counter-increment: count2 3;
  }
  20%,
  70% {
    counter-increment: count2 5;
  }
  30%,
  80% {
    counter-increment: count2 7;
  }
  40%,
  90% {
    counter-increment: count2 9;
  }
}
